import difflib
import json
import os
from argparse import ArgumentParser
from enum import Enum

from termcolor import colored


class Mode(Enum):
    SMALI = 'smali'
    JAVA = 'java'

    def __str__(self):
        return self.value


def main():
    matches_file_path, apk1_dir, apk2_dir, mode = parse_arguments()
    print(apk1_dir, apk2_dir)
    with open(matches_file_path, 'r') as matches_file:
        matches = json.load(matches_file)
    print_help_message(apk1_dir, apk2_dir)
    while True:
        user_input = input()
        if user_input in ('quit', 'exit'):
            return
        if user_input == 'help':
            print_help_message(apk1_dir, apk2_dir)
            continue
        if user_input == '':
            continue
        original_class_name = user_input
        if mode is Mode.JAVA:
            original_class_name = java_class_name_to_smali(original_class_name)
        matching_class_name = get_matching_class(original_class_name, matches)
        if matching_class_name is None:
            print(f'No match found for class {original_class_name}')
            continue
        try:
            original_class_code_lines = get_class_code_as_lines(original_class_name, apk1_dir, mode)
            matching_class_code_lines = get_class_code_as_lines(matching_class_name, apk2_dir, mode)
        except IOError as e:
            print(f'Cannot read the code for one of the classes: {e}')
            continue
        print_diff(original_class_name, original_class_code_lines, matching_class_name, matching_class_code_lines)


def print_help_message(apk1_dir, apk2_dir):
    print(
        'Alpaka diff terminal\n'
        f'Comparing {apk1_dir} and {apk2_dir}\n'
        '\n'
        'Special Commands:\n'
        '- help: print this help message\n'
        '- exit/quit: close the program\n'
        '\n'
        'To compare a class from apk 1 to the matching class from apk 2, type the full class identifier\n'
        '(com.foo.Bar for java mode, Lcom/foo/Bar; for smali mode)\n'
    )

def get_matching_class(class_name, matches):
    try:
        class_matches = matches[class_name].items()
        best_match = min(class_matches, key=lambda x: x[1])
        return best_match[0]
    except (KeyError, IndexError, ValueError):
        return None


def parse_arguments():
    parser = ArgumentParser()
    parser.add_argument('matches_file', help='The JSON file containing the class matches, generated by alpaka_match.py')
    parser.add_argument('apk1_source_dir', help='The sources directory (java or smali) of the first apk version.')
    parser.add_argument('apk2_source_dir', help='The sources directory (java or smali) of the second apk version.')
    parser.add_argument('mode', type=Mode, choices=list(Mode), help='The compared source type. Either java or smali.')
    args = parser.parse_args()
    return args.matches_file, args.apk1_source_dir, args.apk2_source_dir, args.mode


def print_diff(original_class_name, original_code_lines, new_class_name, new_code_lines):
    diff_found = False
    for line in difflib.unified_diff(
            original_code_lines,
            new_code_lines,
            fromfile=f'apk 1: {original_class_name}',
            tofile=f'apk 2: {new_class_name}',
    ):
        if line.startswith('+'):
            line = colored(line, 'green')
        elif line.startswith('-'):
            line = colored(line, 'red')
        print(line, end='')
        diff_found = True
    if not diff_found:
        print(f'No diff between apk 1: {original_class_name} and apk 2: {new_class_name}')


def get_class_code_as_lines(class_name, sources_dir, mode):
    file_path = get_class_file_path(class_name, mode, sources_dir)
    with open(os.path.join(sources_dir, file_path), 'r') as class_file:
        return class_file.readlines()


def get_class_file_path(class_name, mode, sources_dir):
    class_file_path = os.path.join(*split_class_name(class_name))
    if mode is Mode.JAVA:
        class_file_path += '.java'
    elif mode is Mode.SMALI:
        class_file_path = get_smali_file_with_extension(class_file_path, sources_dir)
    return class_file_path


def get_smali_file_with_extension(class_file_path, sources_dir):
    class_dir, filename_start = os.path.split(class_file_path)
    filename_start += '.'
    for possible_filename in os.listdir(os.path.join(sources_dir, class_dir)):
        if possible_filename.startswith(filename_start):
            return os.path.join(class_dir, possible_filename)
    raise IOError('Matching smali file not found')


def split_class_name(class_name):
    return class_name[1:-1].split('/')


def java_class_name_to_smali(java_class_name):
    slash_separated = java_class_name.replace('.', '/')
    return f'L{slash_separated};'


if __name__ == '__main__':
    main()
